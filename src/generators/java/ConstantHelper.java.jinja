package com.igknighters;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;

import com.igknighters.util.BootupLogger;
import edu.wpi.first.wpilibj.DriverStation;

public class ConstantHelper {

{%for type in types%}
    @Retention(RetentionPolicy.RUNTIME)
    @Target({ ElementType.FIELD })
    public @interface {{type.ShortTypeName}}Const {
{%for robo in robots%}
{%if type.lang.isArray%}
        public {{type.lang.ValueType}} {{robo}}() default {};
{%else%}
        public {{type.lang.ValueType}} {{robo}}() default {{type.lang.EmptyValue}};
{%endif%}
{%endfor%}
    }
{%endfor%}


    public static void handleConstField(Field field, Class<?> obj) {
        if (field.getAnnotations().length == 0) {
            return;
        }
        RobotConstID constID = com.igknighters.constants.RobotSetup.getRobotID().constID;

        //handle robot dependent constants
{%for type in types%}
        if (field.isAnnotationPresent({{type.ShortTypeName}}Const.class)) {
            try {
                {{type.ShortTypeName}}Const annotation = field.getAnnotation({{type.ShortTypeName}}Const.class);
{%for robo in robots%}
                if (constID == RobotConstID.{{robo|upper}}) {
                    field.set(obj, annotation.{{robo}}());
                }
{%endfor%}
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            }
        }
{%endfor%}

        //makes sure its an NT supported type
        var type = field.getType();
        if (type.isArray()) {
            type = type.getComponentType();
        }
        if (!(type.isPrimitive() || type == String.class)) {
            return;
        }
    }

    public static void handleConstSubclass(Class<?> cls) {
        for (Class<?> clazz : cls.getDeclaredClasses()) {
            handleConstSubclass(clazz);
        }
        if (Modifier.isAbstract(cls.getModifiers())) {
            return;
        }
        for (Field field : cls.getDeclaredFields()) {
            if (!Modifier.isStatic(field.getModifiers())) {
                DriverStation.reportError("Non-static field " + cls.getSimpleName() + "." + field.getName()
                        + " in constants", false);
                continue;
            }
                handleConstField(field, cls);
            }
        }

    public static void applyRoboConst(Class<com.igknighters.constants.ConstValues> consts) {
        for (Class<?> clazz : consts.getDeclaredClasses()) {
            handleConstSubclass(clazz);
        }
        for (Field field : consts.getDeclaredFields()) {
            handleConstField(field, consts);
        }
        BootupLogger.bootupLog("Finished applying constants");
    }

    public enum RobotConstID {
        {%for robo in robots%}
        {{robo|upper}},
        {%endfor%}
        ;
    }
}
