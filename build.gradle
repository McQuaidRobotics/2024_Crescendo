buildscript {
    repositories {
        maven {
            url = 'https://frcmaven.wpi.edu/artifactory/ex-mvn'
        }
    }
    dependencies {
        classpath 'com.hubspot.jinjava:jinjava:2.7.1'
    }
}



plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2024.2.1"
    id "com.peterabeles.gversion" version "1.10"
    id "java-library"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    maven {
        url = uri("https://maven.pkg.github.com/Mechanical-Advantage/AdvantageKit")
        credentials {
            username = "Mechanical-Advantage-Bot"
            password = "\u0067\u0068\u0070\u005f\u006e\u0056\u0051\u006a\u0055\u004f\u004c\u0061\u0079\u0066\u006e\u0078\u006e\u0037\u0051\u0049\u0054\u0042\u0032\u004c\u004a\u006d\u0055\u0070\u0073\u0031\u006d\u0037\u004c\u005a\u0030\u0076\u0062\u0070\u0063\u0051"
        }
    }
    mavenLocal()
}

configurations.all {
    exclude group: "edu.wpi.first.wpilibj"
}

def ROBOT_MAIN_CLASS = "com.igknighters.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 5.
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    implementation platform("org.junit:junit-bom:5.8.2")
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

    def akitJson = new groovy.json.JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)
    annotationProcessor "org.littletonrobotics.akit.junction:junction-autolog:$akitJson.version"
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
// wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.main.allSource
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
    options.encoding = 'UTF-8'
}

project.compileJava.dependsOn(createVersionFile)
gversion {
    srcDir       = "src/main/java/"
    classPackage = "com.igknighters"
    className    = "BuildConstants"
    dateFormat   = "yyyy-MM-dd HH:mm:ss z"
    timeZone     = "America/New_York" // Use preferred time zone
    indent       = "  "
}


import groovy.json.JsonSlurper;
import com.hubspot.jinjava.Jinjava;
import com.hubspot.jinjava.JinjavaConfig;

sourceSets.main.java.srcDir "${buildDir}/generated/main/java"

def constJinjaInputDir = file("src/generators/java")
def constJinjaOutputDir = file("$buildDir/generated/main/java/com/igknighters")

def constTypesInputFile = file("src/generators/types.json")
def constRobotsInputFile = file("src/generators/robots.json")
task robotConstantHelperGen() {
    description = "Generates Constant Helper Classes"
    group = "Robot Constants Helper"

    inputs.file constTypesInputFile
    inputs.dir constJinjaInputDir
    outputs.dir constJinjaOutputDir

    doLast {
        def jsonSlurper = new JsonSlurper()
        def types = jsonSlurper.parseText(constTypesInputFile.text)
        def robots = jsonSlurper.parseText(constRobotsInputFile.text)

        def builder = JinjavaConfig.newBuilder()
        builder.withTrimBlocks(true)
        builder.withLstripBlocks(true)
        def config = builder.build()
        def jinjava = new Jinjava(config)

        def template = file("src/generators/java/ConstantHelper.java.jinja").text
        def replacements = new HashMap<String,?>()
        replacements.put("types", types)
        replacements.put("robots", robots)
        def output = jinjava.render(template, replacements)
        new File(constJinjaOutputDir, "ConstantHelper.java").write(output)
    }
}

compileJava.dependsOn(robotConstantHelperGen)

def srcInputDir = file("src/main/java/com/igknighters")
task getSubsystems() {
    description = "Goes through the entire `src/main/java/com/igknighters/subsystems` tree and finds all the subsystems"
    group = "Robot Subsystems"

    inputs.dir constJinjaInputDir
    inputs.dir srcInputDir
    outputs.dir constJinjaOutputDir

    //go through and get all subsystems, then use them to generate the SubsystemResources.java file using the jinja template

    doLast {
        // grep each file recursively for the string "extends SubsystemBase", then get the name of the file.
        def subsystems = []
        def subsystemPackages = []
        //get all files by walking through the dir
        def filesToCheck = fileTree(srcInputDir).filter { it.isFile() }
        for (file in filesToCheck) {
            //check if the file extends SubsystemBase
            def fileContents = file.text
            if (fileContents.contains("extends SubsystemBase")) {
                //get the name of the file
                def subsystemName = file.getName().split("\\.")[0]
                //remove the .java suffix
                subsystems.add(subsystemName.substring(0, subsystemName.length()))
                //get first line of file and remove 'package ' from it
                def packageLine = fileContents.split("\n")[0].replace("package ", "").replace(";", "")
                subsystemPackages.add(packageLine + "." + subsystemName)
            }
        }

        def builder = JinjavaConfig.newBuilder()
        builder.withTrimBlocks(true)
        builder.withLstripBlocks(true)
        def config = builder.build()
        def jinjava = new Jinjava(config)

        def template = file("src/generators/java/SubsystemResources.java.jinja").text
        def replacements = new HashMap<String,?>()
        replacements.put("subsystems", subsystems)
        replacements.put("subsystemPackages", subsystemPackages)
        def output = jinjava.render(template, replacements)
        new File(constJinjaOutputDir, "SubsystemResources.java").write(output)
    }
}

compileJava.dependsOn(getSubsystems)